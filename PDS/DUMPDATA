/* REXX    DUMPDATA   Create a temporary EXEC to reload a RUNDATA row.
                      Can be used to operate on multiple RUNDATA keys.
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|
   |                                                                 |
   |          WARNING: EMBEDDED COMPONENTS.                          |
   |                      See text following TOOLKIT_INIT            |
   |                                                                 |
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|

           Use '(routine name)  ?' for HELP-text.

           Written by Frank Clarke  rexxhead@yahoo.com 20240612

     Impact Analysis
.    SYSEXEC   TRAPOUT

     Modification History
     20240616 fxc add HELP text;
     20240618 fxc quote the return from DFLTTLIB;
     20241102 fxc output is VB255;
     20241105 fxc allow multiple keys;
     20241116 fxc if no keys are specified, dump the entire table;
     20241220 fxc display create-date/time in output;
     20250106 fxc TBSORT after OPEN;

*/ arg argline
address TSO                            /* REXXSKEL ver.20240508      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc = Trace("O"); rc = Trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /*                           -*/
   "NEWSTACK"
call D_UNLOAD                          /*                           -*/
   "DELSTACK"

if \sw.0nested then call DUMP_QUEUE 'quiet' /*                      -*/
exit                                   /*@ DUMPDATA                  */
/*
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address TSO

   parse value ""   with ,
               taglist
   parse value "0 0 0 0 0 0 0 0 0 0"   with ,
               tagval.    .
   parse var parms  keys

   openmode.   = "WRITE"
   openmode.1  = "NOWRITE"
   msglim      = SYSVAR( "SYSWTERM" ) - 12

return                                 /*@ A_INIT                    */
/*
.  ----------------------------------------------------------------- */
D_UNLOAD:                              /*@                           */
   if branch then call BRANCH
   address ISPEXEC
   "CONTROL ERRORS RETURN"

   call DA_OPEN                        /*                           -*/
                                    if \sw.0error_found then,
   call DD_DUMP                        /*                           -*/
   call DZ_CLOSE                       /*                           -*/

return                                 /*@ D_UNLOAD                  */
/*
.  ----------------------------------------------------------------- */
DA_OPEN:                               /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "LIBDEF  ISPTLIB  DATASET  ID( "isptlib" )  STACK"
   "TBSTATS" @tn@ "STATUS1(s1) STATUS2(s2)"
   if s1 > 1 then do
      zerrsm = "Table" @tn@ "not available."
      say   zerrsm
      zerrlm = "Table" @tn@ "not found in the ISPTLIB library chain"
      "SETMSG  MSG(ISRZ002)"
      sw.0error_found = "1"; return
      end; else,
   if s2 = 1 then do                   /* table is not open          */
      "TBOPEN "   @tn@   openmode.NOUPDT
      if rc > 4 then do
         sw.0error_found = 1
         zerrsm = "Table did not OPEN"
         zerrlm = "Table" @tn@ "cannot be opened due to prior",
                  "enqueues."
         "SETMSG  MSG(ISRZ002)"
         end
      end
   else "TBTOP" @tn@
   "LIBDEF  ISPTLIB"
   "TBSORT  RUNDATA  FIELDS( RTNNAME,C,A )"

   if keys = '' then ,
      call DAP_POPULATE_KEYS           /*                           -*/

return                                 /*@ DA_OPEN                   */
/*
   <keys> was empty.  Spin through the table and add each RTNNAME to
   <keys>.
.  ----------------------------------------------------------------- */
DAP_POPULATE_KEYS:                     /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "TBTOP"   @tn@
   do forever                          /* each row                   */
      "TBSKIP"  @tn@
      if rc > 0 then leave
      keys   = keys rtnname
   end                                 /* forever                    */
   "TBTOP"   @tn@

return                                 /*@ DAP_POPULATE_KEYS         */
/*
.  ----------------------------------------------------------------- */
DD_DUMP:                               /*@                           */
   if branch then call BRANCH
   address TSO

   parse value Date( 'S' ) Time( 'N' )     with ,
               ccyymmdd    hhmmss   .
   today  = Translate( 'CcYy-Mm-Dd' , ccyymmdd , 'CcYyMmDd' )
   queue "/* REXX $reload   Reloader "
   queue "        Produced by DUMPDATA on" today hhmmss
   queue " */ arg argstring "
   queue "address TSO"
   queue " "
   queue '"CLEAR" '
   do Words( keys )                    /* each key                   */
      parse var keys   rtnname  keys   /* isolate                    */
      call DDR_EACH_KEY                /*                           -*/
   end                                 /* keys                       */
   queue "exit "

rc = Trace("O"); rc = Trace(tv)
   outdsn    = "$reload.exec"
   alloc.0   = "NEW CATALOG UNIT(SYSDA) SPACE( 1 ) TRACKS",
               "DSORG( PS ) ",
               "RECFM(V B) LRECL( "msglim+6" ) BLKSIZE(0)"
   alloc.1   = "SHR"                   /* if it already exists...    */
   tempstat = Sysdsn(outdsn) = "OK"    /* 1=exists, 0=missing        */
   "ALLOC FI( @TMP ) DA( "outdsn" ) REU" alloc.tempstat
   "EXECIO" queued() "DISKW @TMP ( FINIS "
   "FREE  FI( @TMP )"

   address ISPEXEC
   "EDIT DATASET( "outdsn" ) "

return                                 /*@ DD_DUMP                   */
/*
.  ----------------------------------------------------------------- */
DDR_EACH_KEY:                          /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   queue '"NEWSTACK" '
   queue 'queue "TBLKEY      ' rtnname'" '

   "TBGET"   @tn@  "SAVENAME( XVARS )"
   parse var xvars  "(" xvars ")"      /* peel bananas               */

   do Words( xvars )                   /* each tag                   */
      parse var    xvars tag  xvars
      tagval   = Strip( Value( tag ) )

      msgtext  = 'queue "'Left( tag,12 )   tagval
      do while Length( msgtext ) > msglim
         pt    = LastPos( " ",msgtext,msglim )    /* find last blank */
         slug  = Left( msgtext,pt )'",'           /* snip            */
         queue  slug
         msgtext = "       "'"'Substr(msgtext,pt) /* indent          */
      end                              /* while msglim               */
      queue msgtext'"'
   end                                 /* xvars                      */

   queue '"RUNDATA WRITE  ((MONITOR" '
   queue '"DELSTACK" '
   queue " "

return                                 /*@ DDR_EACH_KEY              */
/*
.  ----------------------------------------------------------------- */
DZ_CLOSE:                              /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "TBEND  " @tn@                      /* don't save                 */

return                                 /*@ DZ_CLOSE                  */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO
   rc = Trace("O") ; rc = trace( tv )

   parse value KEYWD( "USETBL" ) "RUNDATA"  with,
               @tn@    .

   parse value KEYWD( "ISPTLIB" ) "'"DFLTTLIB( @tn@ )"'"  with ,
               isptlib  .

return                                 /*@ LOCAL_PREINIT             */
/*   subroutines below LOCAL_PREINIT are not selected by SHOWFLOW    */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then say helpmsg
ex_nam = Left(exec_name,8)             /* predictable size           */

say "                                                                          "
say "  "ex_nam"      creates a REXX EXEC ($RELOAD.EXEC) that can later be used "
say "                to restore the specified RUNDATA table keys, or to add,   "
say "                delete, or alter existing data.                           "
say "                                                                          "
say "  Syntax:   "ex_nam"  keys                                                "
say "                ((    USETBL   tblnm                            (Defaults)"
say "                      ISPTLIB  tbllib                           (Defaults)"
say "                                                                          "
say "            keys      specifies all the keys of the RUNDATA table to be   "
say "                      dumped.  If <keys> is not specified, ALL existing   "
say "                      keys will be processed.                             "
say "                                                                          "
say "            tblnm     identifies the RUNDATA-form table to be used.  If   "
say "                      not specified, it defaults to 'RUNDATA'.            "
say "                                                                          "
say "            tbllib    identifies the ISPF table library that holds the    "
say "                      current <tblnm>.  If not specified, DFLTTLIB will be"
say "                      called to supply a value.                           "
say "                                                                          "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        NOUPDT:   by-pass all update logic.                               "
say "                                                                          "
say "        BRANCH:   show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv: will use value following TRACE to place the execution   "
say "                  into REXX TRACE Mode.                                   "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "ex_nam"  parameters     ((  debug-options                    "
say "                                                                          "
say "   For example:                                                           "
say "                                                                          "
say "        TSO "ex_nam"  (( MONITOR TRACE ?R                                 "

if sysvar("SYSISPF") = "ACTIVE" then,
   address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO
   arg mode .

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   if mode <> "QUIET" then,
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      if mode <> "QUIET" then,
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();parse pull line;say line;end /* pump to the screen */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg,
         "Invalid length for delimiter("dlm") with KEYPHRS("kp")",
         info
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg,
         "No matching second delimiter("dlm") with KEYPHRS("kp")",
         info
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   sw.0nested   = sysvar("SYSNEST") = "YES"
   sw.0batch    = sysvar("SYSENV")  = "BACK"
   sw.0inispf   = sysvar("SYSISPF") = "ACTIVE"
   parse value KEYWD("TRACE")  "N"    with   tv  .

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
