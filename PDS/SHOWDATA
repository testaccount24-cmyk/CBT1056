/* REXX    SHOWDATA   Full-screen access to RUNDATA
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|
   |                                                                 |
   |          WARNING: EMBEDDED COMPONENTS.                          |
   |                      See text following TOOLKIT_INIT            |
   |                                                                 |
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|

           Use '(routine name)  ?' for HELP-text.

           Written by Frank Clarke  rexxhead@yahoo.com 20240613

     Impact Analysis
.    SYSEXEC   DFLTTLIB
.    SYSEXEC   STRSORT
.    SYSEXEC   TRAPOUT

     Modification History
     20240615 fxc better logging in DDT;
     20240616 fxc activate NOUPDT;
     20240618 fxc quote the return from DFLTTLIB;
     20240723 fxc better comments;
     20241104 fxc chg logdsn to @logdsn;
     20250101 fxc better diagnostics;
     20250106 fxc more messages; sort RUNDATA before TBCLOSE;
     20250218 fxc add ZTDMARK at bottom of scroll;

*/ arg argline
address TSO                            /* REXXSKEL ver.20240508      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc = Trace("O"); rc = Trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /* Initialization            -*/
call D_ISPF_OPS                        /*                           -*/

if sw.0Save_Log then,
   call ZB_SAVELOG                     /*                           -*/
if \sw.0nested then call DUMP_QUEUE 'quiet' /*                      -*/
exit                                   /*@ SHOWDATA                  */
/*
   Initialization
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address TSO

   call A0_SETUP_LOG                   /*                           -*/
   ZTDMARK = "====== Bottom of data   ======"
   logvars  = 'msglim  log#  log.'
   logpref = "("Branch("ID")")"
   call ZL_LOGMSG( exec_name "started by" Userid()  yyyymmdd  hhmmss )
   call ZL_LOGMSG( logpref "Arg:" argline )
   call ZL_LOGMSG( logpref "Using table" @tn@ "in" isptlib )

   parse value 'ea'x with,
               xea   chglist
   openmode.   = "WRITE"
   openmode.1  = "NOWRITE"

return                                 /*@ A_INIT                    */
/*
.  ----------------------------------------------------------------- */
A0_SETUP_LOG:                          /*@                           */
   if branch then call BRANCH
   address TSO

   msglim = SYSVAR( "SYSWTERM" ) - 12
   parse value "0 0 0 0 0" with,
                log#    log.  .
   parse value Date("S")  Time("S")  Time("N")  with,
               yyyymmdd   sssss      hhmmss  .
   hhmmss = Space( Translate( hhmmss,' ',':' ) ,0 )
   parse var yyyymmdd  4 yrdigit 5 mm 7 dd          /* 9 12 14 maybe */
   if Pos(yrdigit,"13579") > 0 then mm = mm + 12       /* mm=24      */
   logtag = Substr("ABCDEFGHIJKLMNOPQRSTUVWX",mm,1)    /* logtag=X   */
   subid  = logtag""dd""Left(  hhmmss,4 )              /* X141743  ? */
   vb255.0   = "NEW CATALOG UNIT(SYSDA) SPACE(1 5) TRACKS",
               "RECFM( V B ) LRECL( 255 ) BLKSIZE( 0 )"
   vb255.1   = "MOD"                   /* if it already exists...    */
   @logdsn = "@LOG."exec_name"."subid".LIST"
   if Sysdsn( @logdsn ) = "OK" then,
      call ZL_LOGMSG( "-------------------" )

return                                 /*@ A0_SETUP_LOG              */
/*
.  ----------------------------------------------------------------- */
D_ISPF_OPS:                            /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   call D0_SETUP                       /* Extract ISPF assets       -*/

   call DA_OPEN_RUNDATA                /*                           -*/
   call DB_BUILD_SHOWRD                /*                           -*/
   call DD_DISP_SHOWRD                 /*                           -*/
   call DR_CLOSE_RUNDATA               /*                           -*/

   call DZ_FLUSH                       /* Purge ISPF assets         -*/

return                                 /*@ D_ISPF_OPS                */
/*
   Extract ISPF assets and activate
.  ----------------------------------------------------------------- */
D0_SETUP:                              /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   call DEIMBED                        /*                           -*/
   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      @ddn   = @ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd "LIBRARY  ID("@ddn") STACK"
   end
   ddnlist = ddnlist dd

return                                 /*@ D0_SETUP                  */
/*
.  ----------------------------------------------------------------- */
DA_OPEN_RUNDATA:                       /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   logpref = "("Branch("ID")")"
   "LIBDEF  ISPTLIB  DATASET  ID( "isptlib" )  STACK"
   "TBSTATS" @tn@ "STATUS1(s1) STATUS2(s2)"
   if s1 > 1 then do
      zerrsm = "Table" @tn@ "not available."
      say   zerrsm
      zerrlm = "Table" @tn@ "not found in the ISPTLIB library chain"
      "SETMSG  MSG(ISRZ002)"
      call ZL_LOGMSG( logpref zerrsm ';' zerrlm )
      sw.0error_found = "1"; return
      end; else,
   if s2 = 1 then do                   /* table is not open          */
      "TBOPEN "   @tn@   openmode.NOUPDT
      if rc > 4 then do
         sw.0error_found = 1
         zerrsm = "Table did not OPEN"
         zerrlm = "Table" @tn@ "cannot be opened due to prior",
                  "enqueues."
         "SETMSG  MSG(ISRZ002)"
      call ZL_LOGMSG( logpref zerrsm ';' zerrlm )
         end
      end
   else "TBTOP" @tn@
   "LIBDEF  ISPTLIB"

return                                 /*@ DA_OPEN_RUNDATA           */
/*
   TBCREATE SHOWRD.  Spin RUNDATA.  Populate SHOWRD.
.  ----------------------------------------------------------------- */
DB_BUILD_SHOWRD:                       /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "TBCREATE SHOWRD KEYS( RTNNAME ) NAMES( TAGLIST )",
               "NOWRITE REPLACE "
   logpref = "("Branch("ID")")"
   do forever
      "TBSKIP RUNDATA SAVENAME( XVARS )"
      if rc > 0 then leave             /* end of table               */
      parse var xvars "(" taglist ")"  /* peel bananas               */
      "TBADD SHOWRD"
      call ZL_LOGMSG( logpref "TBADD" Left( rtnname,8 )":" taglist )
   end                                 /* forever                    */
   "TBSORT SHOWRD FIELDS( RTNNAME,C,A )"

return                                 /*@ DB_BUILD_SHOWRD           */
/*
.  ----------------------------------------------------------------- */
DD_DISP_SHOWRD:                        /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "TBTOP  SHOWRD"
   sel = ""
   do forever
      "TBDISPL SHOWRD PANEL( SHOWRD )"
       if rc > 4 then leave

      if zcmd <> "" then do
         parse var zcmd  verb text
         if verb = 'ADD' then do
            parse var text  rtnname  taglist
            "TBADD  SHOWRD ORDER"
            logpref = "("Branch("ID")")"
            call ZL_LOGMSG( logpref "Adding" rtnname":" taglist )
            tags = taglist
            do Words( tags )
               parse var tags  tag  tags
               tag = Value( tag,'?' )  /* tag <-- '?'                */
            end                        /* tags                       */
            "TBADD RUNDATA SAVE(" taglist ") ORDER"
            sw.0Save_RUNDATA = 1
            end                        /* ADD                        */
         iterate
         end

      do ztdsels
         "CONTROL DISPLAY SAVE"
         call DDT_SHOW_TAGS            /* ...for a single RTNNAME   -*/

         logpref = "("Branch("ID")")"
         if chglist <> '' then do
            /* chglist is a list of the tags that have changed       */

            cmd = "TBGET RUNDATA SAVENAME( XVARS ) NOREAD"
            (cmd)
            call ZL_LOGMSG( logpref cmd": rc="rc )

            parse var xvars "(" xvars ")"
            do While( chglist <> '' )
               parse var chglist  tag tagval (xea) chglist
               tagval = Strip( tagval )
               pt  = WordPos( tag,xvars )
               if pt = 0 then xvars = xvars tag    /* add it         */
               @z = Value( tag,tagval ) /* tag <-- tagval            */
            end                        /* chglist                    */
            xvars = STRSORT( xvars )

            cmd = "TBMOD RUNDATA SAVE(" xvars ")"
            (cmd)
            call ZL_LOGMSG( logpref cmd": rc="rc )
            sw.0Save_RUNDATA = 1

            end                        /* chglist                    */
         "CONTROL DISPLAY RESTORE"

         if ztdsels > 1 then "TBDISPL SHOWRD"
      end                              /* ztdsels                    */
      sel = ""

   end                                 /* forever                    */

return                                 /*@ DD_DISP_SHOWRD            */
/*
   Called for each selected row on SHOWRD.  RTNNAME and TAGLIST are
   populated.  TBCREATE TAGS.  Fill TAGS from RUNDATA.  TBDISPL TAGS.
   If any changes to TAGS, replicate on SHOWRD and RUNDATA.
.  ----------------------------------------------------------------- */
DDT_SHOW_TAGS: Procedure expose,       /*@                           */
      (logvars) (tk_globalvars)  taglist  rtnname chglist  xea
   if branch then call BRANCH
   address ISPEXEC

   "TBCREATE  TAGS  KEYS( TAG ) NAMES( TAGVAL )",
                 "NOWRITE REPLACE"
   "TBSORT    TAGS  FIELDS( TAG,C,A ) "

   logpref = "("Branch("ID")")"
    call ZL_LOGMSG( logpref "Selected" rtnname )
   "TBGET  RUNDATA  SAVENAME( XVARS )"
   parse var xvars "(" xvars ")"       /* peel bananas               */
   do Words( xvars )
      parse var xvars  tag  xvars      /* isolate                    */
      tagval  = Strip( Value( tag ) )
      "TBADD  TAGS"
   end                                 /* xvars                      */

   "TBTOP  TAGS"
   sel = ""
   do forever
      "TBDISPL TAGS   PANEL( TAGS )"
       if rc > 4 then leave

      if zcmd <> "" then do
         "CONTROL DISPLAY SAVE"
         parse var zcmd  verb  text
         if verb = 'ADD' then do
            parse var text  tag  tagval
            if WordPos( tag,taglist ) > 0 then iterate
            cmd = "TBADD TAGS   ORDER "
            (cmd)
            call ZL_LOGMSG( logpref cmd "rc="rc tag"="tagval )

            taglist = STRSORT( taglist tag )
            cmd = "TBMOD SHOWRD ORDER "    /* save taglist */
            (cmd)
            call ZL_LOGMSG( logpref cmd "rc="rc taglist )

            tagval  = Strip( tagval )
            @z  = Value( tag,tagval )  /* tag <-- tagval             */
            cmd = "TBMOD  RUNDATA SAVE(" taglist ")"
            (cmd)
            call ZL_LOGMSG( logpref cmd "rc="rc )
            sw.0Save_RUNDATA = 1
            end                        /* ADD                        */
         "CONTROL DISPLAY RESTORE"
         iterate
         end

      do ztdsels
         upper sel
         if sel = 'C' then do
            cmd = "TBMOD TAGS"
            (cmd)
            call ZL_LOGMSG( logpref ,
                 cmd "C rc="rc "rtnname="rtnname "tag="tagval )
            chglist = chglist tag tagval xea
            end ; else,                /* Chg                        */
         if sel = 'D' then do
            cmd = "TBDELETE TAGS "     /* Remove this row            */
            (cmd)
            call ZL_LOGMSG( logpref cmd "D rc="rc,
                                   "rtnname="rtnname  tag )

            pt  = WordPos( tag,taglist )
            taglist = DelWord( taglist,pt,1 )
            cmd = "TBMOD  SHOWRD ORDER"
            (cmd)
            call ZL_LOGMSG( logpref cmd "rc="rc taglist ,
                            "rtnname="rtnname )

            cmd = "TBGET RUNDATA SAVENAME( XVARS ) NOREAD"
            (cmd)
            call ZL_LOGMSG( logpref cmd": rc="rc )

            parse var xvars "(" xvars ")"
            pt  = WordPos( tag,xvars )
            xvars   = DelWord( xvars,pt,1 )
            cmd = "TBMOD RUNDATA SAVE(" xvars ")"
            (cmd)
            call ZL_LOGMSG( logpref cmd": rc="rc )

            sw.0Save_RUNDATA = 1
            end                        /* Del                        */
         if ztdsels > 1 then "TBDISPL  TAGS"
      end                              /* ztdsels                    */
      sel = ""

   end                                 /* forever                    */

return                                 /*@ DDT_SHOW_TAGS             */
/*
   If RUNDATA has changed (sw.0Save_RUNDATA=1) and NOUPDT is OFF,
   TBCLOSE RUNDATA, otherwise TBEND.
.  ----------------------------------------------------------------- */
DR_CLOSE_RUNDATA:                      /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "LIBDEF  ISPTABL  DATASET  ID( "isptlib" )  STACK"
   "TBSORT RUNDATA   FIELDS( RTNNAME,C,A )"
   if noupdt = 0 & sw.0Save_RUNDATA = 1 then ,
                  "TBCLOSE" @tn@
             else "TBEND  " @tn@       /* don't save                 */
   "LIBDEF  ISPTABL"

return                                 /*@ DR_CLOSE_RUNDATA          */
/*
   Drop all ISPF assets
.  ----------------------------------------------------------------- */
DZ_FLUSH:                              /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      @ddn   = @ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd
      address TSO "FREE  FI("@ddn")"
   end
   ddnlist = ddnlist dd

return                                 /*@ DZ_FLUSH                  */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO
   rc = Trace("O") ; rc = trace( tv )

   sw.0Save_Log = SWITCH( "NOLOG" ) = 0

   parse value KEYWD( "USETBL" ) "RUNDATA"  with,
               @tn@    .

   parse value KEYWD( "ISPTLIB" ) "'"DFLTTLIB( @tn@ )"'"  with,
               isptlib   .

return                                 /*@ LOCAL_PREINIT             */
/*   subroutines below LOCAL_PREINIT are not selected by SHOWFLOW    */
/*
.  ----------------------------------------------------------------- */
ZB_SAVELOG:                            /*@                           */
   if branch then call BRANCH
   address TSO

   if Symbol("LOG#") = "LIT" then return          /* not yet set     */

   dsstat = Sysdsn( @logdsn ) = "OK"   /* 1 if it exists             */
   "ALLOC FI(@LOG) DA(" @logdsn ") REU" vb255.dsstat
   "EXECIO" log# "DISKW @LOG (STEM LOG. FINIS"
   "FREE  FI(@LOG)"

return                                 /*@ ZB_SAVELOG                */
/*
.  ----------------------------------------------------------------- */
ZL_LOGMSG: Procedure expose,           /*@                           */
   (logvars)  (tk_globalvars)
   rc = Trace("O")
   address TSO

   parse arg msgtext

   /* for making the msgline always reasonably short:                */
   do while Length(msgtext) > msglim
      pt    = LastPos(" ",msgtext,msglim)
      slug  = Left(msgtext,pt)
      if monitor then say,
         slug
      parse value  log#+1  slug        with,
                   zz      log.zz    1  log#   .
      msgtext = "       "Substr(msgtext,pt)
   end                                 /* while msglim               */

   parse value  log#+1  msgtext     with,
                zz      log.zz    1  log#   .

   if monitor then say,
      msgtext

return                                 /*@ ZL_LOGMSG                 */
/*
   Parse out the embedded components at the back of the source code.
.  ----------------------------------------------------------------- */
DEIMBED: Procedure expose,             /*@                           */
   (tk_globalvars)  ddnlist  @ddn.  daid.

   address TSO

   fb80po.0  = "NEW DELETE REU UNIT(SYSDA) SPACE(1 5) TRACKS DIR(40)",
                   "RECFM(F B) LRECL(80) BLKSIZE(0)"
   fb80po.1  = "SHR REU"
   parse value ""   with  ddnlist @ddn.  daid.

   lastln   = sourceline()
   currln   = lastln                   /*                            */
   if Left(sourceline(currln),2) <> "*/" then return

   currln = currln - 1                 /* previous line              */
   "NEWSTACK"
   address ISPEXEC
   do while sourceline(currln) <> "/*"
      text = sourceline(currln)        /* save with a short name !   */
      if Left(text,3) = ")))" then do  /* package the queue          */
         parse var text ")))" ddn mbr .   /* PLIB PANL001  maybe     */
         if length(ddn) > 4 then do    /* data, not ISPF             */
            call DESPOOL               /*                           -*/
            currln = currln - 1        /* previous line              */
            iterate
            end
         if Pos(ddn,ddnlist) = 0 then do  /* doesn't exist           */
            ddnlist = ddnlist ddn      /* keep track                 */
            @ddn = ddn || Random(999)  /* PLIB322 maybe              */
            @ddn.ddn = @ddn            /* @ddn.PLIB = PLIB322        */
            address TSO "ALLOC FI("@ddn")" fb80po.0
            "LMINIT DATAID(DAID) DDNAME("@ddn")"
            daid.ddn = daid
            end
         daid = daid.ddn
         "LMOPEN DATAID("daid") OPTION(OUTPUT)"
         do queued()
            parse pull line
            "LMPUT DATAID("daid") MODE(INVAR) DATALOC(LINE) DATALEN(80)"
         end
         "LMMADD DATAID("daid") MEMBER("mbr")"
         "LMCLOSE DATAID("daid")"
         end                           /* package the queue          */
      else push text                   /* onto the top of the stack  */
      currln = currln - 1              /* previous line              */
   end                                 /* while                      */
   address TSO "DELSTACK"
   return
/*
   Subroutine of DEIMBED for non-ISPF data.
   Given : the stack, ddn, and mbr
.  ----------------------------------------------------------------- */
DESPOOL:                               /*@                           */
   if branch then call BRANCH
   address TSO

   if WordPos( ddn,ddnlist ) = 0 then,
      ddnlist = Space( ddnlist ddn,1 )
   if Sysdsn(ddn".DATA") <> "OK" then,
      "ALLOC FI("ddn") DA("ddn".DATA)" fb80po.0
   "ALLOC FI("ddn") DA("ddn".DATA("mbr")) SHR REU"
   "EXECIO" queued() "DISKW" ddn "(FINIS"
   "DELSTACK"
   "NEWSTACK"                          /* re-establish               */

return                                 /*@ DESPOOL                   */

return                                 /*@ DEIMBED                   */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then say helpmsg
ex_nam = Left(exec_name,8)             /* predictable size           */

say "                                                                          "
say "  "ex_nam"      Full-screen access to the RUNDATA table.                  "
say "                                                                          "
say "  Syntax:   "ex_nam"  <no parms>                                          "
say "                ((    USETBL   tblname                          (Defaults)"
say "                      ISPTLIB  tbllib                           (Defaults)"
say "                      NOLOG                                               "
say "                                                                          "
say "            tblname   The name of the primary RUNDATA-form table.  If not "
say "                      specified, it defaults to 'RUNDATA'.                "
say "                                                                          "
say "            tbllib    The library on which <tblname> can be found.  If not"
say "                      specified, DFLTTLIB will be called to supply a      "
say "                      value.                                              "
say "                                                                          "
say "            NOLOG     suppresses production of the progress log file.  The"
say "                      default action is to produce the log file for every "
say "                      execution.                                          "
say "                                                                          "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        MONITOR:  displays key information throughout processing.         "
say "                                                                          "
say "        NOUPDT:   by-pass all update logic.                               "
say "                                                                          "
say "        BRANCH:   show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv: will use value following TRACE to place the execution   "
say "                  into REXX TRACE Mode.                                   "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "ex_nam"  parameters     ((  debug-options                    "
say "                                                                          "
say "   For example:                                                           "
say "                                                                          "
say "        TSO "ex_nam"  (( MONITOR TRACE ?R                                 "

if sysvar("SYSISPF") = "ACTIVE" then,
   address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO
   arg mode .

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   if mode <> "QUIET" then,
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      if mode <> "QUIET" then,
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();parse pull line;say line;end /* pump to the screen */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg,
         "Invalid length for delimiter("dlm") with KEYPHRS("kp")",
         info
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg,
         "No matching second delimiter("dlm") with KEYPHRS("kp")",
         info
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   sw.0nested   = sysvar("SYSNEST") = "YES"
   sw.0batch    = sysvar("SYSENV")  = "BACK"
   sw.0inispf   = sysvar("SYSISPF") = "ACTIVE"
   parse value KEYWD("TRACE")  "N"    with   tv  .

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
/*
))) PLIB     SHOWRD   Display table SHOWRD
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH ) SKIP( ON )
  @ TYPE( OUTPUT ) INTENS( LOW  ) SKIP( ON )
)BODY EXPAND(||) WIDTH(&ZSCREENW)
%|-| Contents of table SHOWRD +|-|
%Command ===>_ZCMD
                                                              %Scroll ===>_ZAMT+
+V  Key      Tags                                             %PF1 for HELP
)MODEL
_z+!rtnname !taglist
)INIT
  .ZVARS = '(SEL)'
  .HELP = SHOWRDH
)REINIT
)PROC
)END
))) PLIB     SHOWRDH
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH )  SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  )  SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH )  SKIP( ON )
  @ TYPE( OUTPUT ) INTENS( LOW  )  SKIP( ON )
  } AREA( SCRL   )         EXTEND( ON )
)BODY EXPAND(||) WIDTH(&ZSCREENW)
%TUTORIAL |-| Contents of table SHOWRD |-| TUTORIAL
%Next Selection ===>_ZCMD

+
}hlptxt                                                                        }
)AREA HLPTXT
+   The contents of table RUNDATA/SHOWRD are displayed.
+
+   Select any row or rows for an expanded display of the contents.
+
+   To add a new row, use primary command%ADD+followed by the key for
+   the new row and the list of tags desired for that key.  Example:
+
+        ===> add zork thing1 thing2
+
+   adds a new key 'ZORK' with tags 'THING1' and 'THING2'.
+
)PROC
  &ZUP   = SHOWRDH
  &ZCONT = SHOWRDH
)END
))) PLIB     TAGS     Display tags and tagvalues for <rtnname>
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH ) SKIP( ON )
  @ TYPE( OUTPUT ) INTENS( LOW  ) SKIP( ON )
)BODY EXPAND(||) WIDTH(&ZSCREENW)
%|-| Tags and Tagvals for!rtnname  +|-|
%Command ===>_ZCMD
                                                              %Scroll ===>_ZAMT+
+V  Tag      Value                                            %PF1 for HELP
)MODEL
_z+!tag     _tagval
)INIT
  .ZVARS = '(SEL)'
  .HELP = TAGSH
)REINIT
)PROC
)END
))) PLIB     TAGSH
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH )  SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  )  SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH )  SKIP( ON )
  @ TYPE( OUTPUT ) INTENS( LOW  )  SKIP( ON )
  } AREA( SCRL   )         EXTEND( ON )
)BODY EXPAND(||) WIDTH(&ZSCREENW)
%TUTORIAL |-| Tags and Tagvals for!rtnname  |-| TUTORIAL
%Next Selection ===>_ZCMD

+
}hlptxt                                                                        }
)AREA HLPTXT
+    The tags and tag-values for!tblkey  +are shown.
+
+    To ADD a new tag, use primary command%'ADD'+:
+       ===> add city danbury, CT
+    adds a new tag,%CITY+with a value of%DANBURY, CT+
+
+    To delete any tag, enter%D+on the row.
+
+    To change a tag-value, enter%C+on the row and edit the tag-value
+    as necessary.
)INIT
  &TBLKEY  = &RTNNAME
)PROC
  &ZUP   = TAGSH
  &ZCONT = TAGSH
)END
*/
